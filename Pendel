package ga;

import java.awt.Color;
import java.awt.Graphics;
import java.awt.Point;
import java.awt.geom.Point2D;
import static java.lang.Math.*;
import java.util.*;

class Pendel {

    Point2D.Double origo;
    double length;
    double fi;
    double vfi = 0;
    double frctn = 0.002;
    double m1 = 75;
    double m2 = 80;
    double v1 = 0;
    double v2 = 0;
    double x1 = 0;
    double x2 = 0;
    double y1 = 0;
    double y2 = 0;
    double r1 = 0;
    double r2 = 0;
    double a1 = 0;
    double a2 = 0;
    double a1v = 0;
    double a1a = 0;
    double a2v = 0;
    double a2a = 0;
    double G = 0.5;

    ArrayList<Point> trLine = new ArrayList();

    Pendel(int x0, int y0, int lenp1, int lenp2, double fi0p1, double fi0p2) {
        origo = new Point2D.Double(x0, y0);
        r1 = lenp1;
        r2 = lenp2;
        a1 = fi0p1;
        a2 = fi0p2;
        v1 = a1;
        v2 = a2;
    }

    void move() {

        double num1 = -G * ((2 * m1) + m2) * sin(a1);
        double num2 = -m2 * G * sin(a1 - (2 * a2));
        double num3 = -2 * sin(a1 - a2) * m2;
        double num4 = (a2v * a2v * r2) + (a1v * a1v * r1 * cos(a1 - a2));
        double den = r1 * ((2 * m1) + m2 - (m2 * cos(2 * a1 - 2 * a2)));

        a1a = (num1 + num2 + num3 * num4) / den;

        num1 = 2 * sin(a1 - a2);
        num2 = (a1v * a1v) * r1 * (m1 + m2);
        num3 = G * (m1 + m2) * cos(a1);
        num4 = a2v * a2v * r2 * m2 * cos(a1 - a2);
        den = r2 * (2 * m1 + m2 - m2 * cos(2 * a1 - 2 * a2));

        a2a = (num1 * (num2 + num3 + num4)) / den;

        x1 = r1 * sin(a1);
        y1 = r1 * cos(a1);

        x2 = x1 + r2 * sin(a2);
        y2 = y1 + r2 * cos(a2);

        a1v += a1a;
        a2v += a2a;
        a1 += a1v;
        a2 += a2v;

    }

    void paint(Graphics g) {

        int xp1 = (int) (origo.x + x1);
        int yp1 = (int) (origo.y + y1);
        int xp2 = (int) (origo.x + x2);
        int yp2 = (int) (origo.y + y2);

        trLine.add(new Point(xp2, yp2));

        if (trLine.size() > 160) {
            trLine.remove(trLine.get(0));
        }

        g.setColor(Color.WHITE);
        g.drawLine((int) origo.x, (int) origo.y, (int) xp1, (int) yp1);
        g.fillOval((int) xp1 - 3, (int) yp1 - 3, 6, 6);

        g.drawLine((int) xp1, (int) yp1, (int) xp2, (int) yp2);
        g.fillOval((int) xp2 - 3, (int) yp2 - 3, 6, 6);

        g.setColor(Color.WHITE);
        g.drawOval(1150, 75, 150, 150);
        g.drawLine(1225, 150, (int) (sin(v1) * 75) + 1225, (int) (cos(v1) * 75) + 150);

 
        double grn = 1, dgrn = 239.0 / trLine.size();

        for (int i = 1; i < trLine.size(); i++) {
            Point xl1 = new Point(trLine.get(i));
            Point xl2 = new Point(trLine.get(i - 1));
            g.setColor(new Color(0, (int) grn, 0));
            grn += dgrn;
            g.drawLine(xl1.x, xl1.y, xl2.x, xl2.y);
        }

    }

}
